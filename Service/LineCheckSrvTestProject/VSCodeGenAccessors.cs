// ------------------------------------------------------------------------------
//<autogenerated>
//        This code was generated by Microsoft Visual Studio Team System 2005.
//
//        Changes to this file may cause incorrect behavior and will be lost if
//        the code is regenerated.
//</autogenerated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace LineCheckSrvTestProject
{
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class BaseAccessor {
    
    protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;
    
    protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) {
        m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
    }
    
    protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) : 
            this(null, type) {
    }
    
    internal virtual object Target {
        get {
            return m_privateObject.Target;
        }
    }
    
    public override string ToString() {
        return this.Target.ToString();
    }
    
    public override bool Equals(object obj) {
        if (typeof(BaseAccessor).IsInstanceOfType(obj)) {
            obj = ((BaseAccessor)(obj)).Target;
        }
        return this.Target.Equals(obj);
    }
    
    public override int GetHashCode() {
        return this.Target.GetHashCode();
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class LineCheckerSrv_EmailerAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("LineCheckerSrv", "LineCheckerSrv.Emailer");
    
    internal LineCheckerSrv_EmailerAccessor() : 
            base(m_privateType) {
    }
    
    internal static string CommonSubjects_Notification {
        get {
            string ret = ((string)(m_privateType.GetStaticField("CommonSubjects_Notification")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("CommonSubjects_Notification", value);
        }
    }
    
    internal static string AlertSubjectLine {
        get {
            string ret = ((string)(m_privateType.GetStaticField("AlertSubjectLine")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("AlertSubjectLine", value);
        }
    }
    
    internal static string AlertBody {
        get {
            string ret = ((string)(m_privateType.GetStaticField("AlertBody")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("AlertBody", value);
        }
    }
    
    internal static bool SendEmail(string mailBody, string mailSubject, string emailsString) {
        object[] args = new object[] {
                mailBody,
                mailSubject,
                emailsString};
        bool ret = ((bool)(m_privateType.InvokeStatic("SendEmail", new System.Type[] {
                    typeof(string),
                    typeof(string),
                    typeof(string)}, args)));
        return ret;
    }
    
    internal static bool SendEmail(string mailBody, string mailSubject, string emailsString, System.Collections.Generic.List<string> attachmentPaths) {
        object[] args = new object[] {
                mailBody,
                mailSubject,
                emailsString,
                attachmentPaths};
        bool ret = ((bool)(m_privateType.InvokeStatic("SendEmail", new System.Type[] {
                    typeof(string),
                    typeof(string),
                    typeof(string),
                    typeof(System.Collections.Generic.List<string>)}, args)));
        return ret;
    }
    
    internal static void ParseEmailsString(string strEmail, System.Collections.Generic.List<string> emailList) {
        object[] args = new object[] {
                strEmail,
                emailList};
        m_privateType.InvokeStatic("ParseEmailsString", new System.Type[] {
                    typeof(string),
                    typeof(System.Collections.Generic.List<string>)}, args);
    }
    
    internal static object CreatePrivate() {
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("LineCheckerSrv", "LineCheckerSrv.Emailer", new object[0]);
        return priv_obj.Target;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class LineCheckerSrv_LineCheckerJobAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("LineCheckerSrv", "LineCheckerSrv.LineCheckerJob");
    
    internal LineCheckerSrv_LineCheckerJobAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal static bool serviceShutdown {
        get {
            bool ret = ((bool)(m_privateType.GetStaticField("serviceShutdown")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("serviceShutdown", value);
        }
    }
    
    internal string[] authErrors {
        get {
            string[] ret = ((string[])(m_privateObject.GetField("authErrors")));
            return ret;
        }
        set {
            m_privateObject.SetField("authErrors", value);
        }
    }
    
    internal global::LineCheckerSrv.CallResultCode callResult {
        get {
            global::LineCheckerSrv.CallResultCode ret = ((global::LineCheckerSrv.CallResultCode)(m_privateObject.GetField("callResult")));
            return ret;
        }
        set {
            m_privateObject.SetField("callResult", value);
        }
    }
    
    internal global::LineCheckSrvTestProject.LineCheckerSrv_CheckerDAOAccessor checkerDAO {
        get {
            object _ret_val = m_privateObject.GetField("checkerDAO");
            global::LineCheckSrvTestProject.LineCheckerSrv_CheckerDAOAccessor _ret = null;
            if ((_ret_val != null)) {
                _ret = new global::LineCheckSrvTestProject.LineCheckerSrv_CheckerDAOAccessor(_ret_val);
            }
            global::LineCheckSrvTestProject.LineCheckerSrv_CheckerDAOAccessor ret = _ret;
            return ret;
        }
        set {
            m_privateObject.SetField("checkerDAO", value);
        }
    }
    
    internal string failureReason {
        get {
            string ret = ((string)(m_privateObject.GetField("failureReason")));
            return ret;
        }
        set {
            m_privateObject.SetField("failureReason", value);
        }
    }
    
    internal bool isNewSession {
        get {
            bool ret = ((bool)(m_privateObject.GetField("isNewSession")));
            return ret;
        }
        set {
            m_privateObject.SetField("isNewSession", value);
        }
    }
    
    internal int itemId {
        get {
            int ret = ((int)(m_privateObject.GetField("itemId")));
            return ret;
        }
        set {
            m_privateObject.SetField("itemId", value);
        }
    }
    
    internal string jobName {
        get {
            string ret = ((string)(m_privateObject.GetField("jobName")));
            return ret;
        }
        set {
            m_privateObject.SetField("jobName", value);
        }
    }
    
    internal global::log4net.ILog log {
        get {
            global::log4net.ILog ret = ((global::log4net.ILog)(m_privateObject.GetField("log")));
            return ret;
        }
        set {
            m_privateObject.SetField("log", value);
        }
    }
    
    internal string login {
        get {
            string ret = ((string)(m_privateObject.GetField("login")));
            return ret;
        }
        set {
            m_privateObject.SetField("login", value);
        }
    }
    
    internal string password {
        get {
            string ret = ((string)(m_privateObject.GetField("password")));
            return ret;
        }
        set {
            m_privateObject.SetField("password", value);
        }
    }
    
    internal string phone {
        get {
            string ret = ((string)(m_privateObject.GetField("phone")));
            return ret;
        }
        set {
            m_privateObject.SetField("phone", value);
        }
    }
    
    internal string projectName {
        get {
            string ret = ((string)(m_privateObject.GetField("projectName")));
            return ret;
        }
        set {
            m_privateObject.SetField("projectName", value);
        }
    }
    
    internal string serverName {
        get {
            string ret = ((string)(m_privateObject.GetField("serverName")));
            return ret;
        }
        set {
            m_privateObject.SetField("serverName", value);
        }
    }
    
    internal string authLoginDbConn {
        get {
            string ret = ((string)(m_privateObject.GetField("authLoginDbConn")));
            return ret;
        }
        set {
            m_privateObject.SetField("authLoginDbConn", value);
        }
    }
    
    internal int sessionId {
        get {
            int ret = ((int)(m_privateObject.GetField("sessionId")));
            return ret;
        }
        set {
            m_privateObject.SetField("sessionId", value);
        }
    }
    
    internal global::LineCheckSrvTestProject.LineCheckerSrv_SessionLoggingAccessor sessionLogging {
        get {
            object _ret_val = m_privateObject.GetField("sessionLogging");
            global::LineCheckSrvTestProject.LineCheckerSrv_SessionLoggingAccessor _ret = null;
            if ((_ret_val != null)) {
                _ret = new global::LineCheckSrvTestProject.LineCheckerSrv_SessionLoggingAccessor(_ret_val);
            }
            global::LineCheckSrvTestProject.LineCheckerSrv_SessionLoggingAccessor ret = _ret;
            return ret;
        }
        set {
            m_privateObject.SetField("sessionLogging", value);
        }
    }
    
    internal int sleepTime {
        get {
            int ret = ((int)(m_privateObject.GetField("sleepTime")));
            return ret;
        }
        set {
            m_privateObject.SetField("sleepTime", value);
        }
    }
    
    internal global::System.DateTime startTime {
        get {
            global::System.DateTime ret = ((global::System.DateTime)(m_privateObject.GetField("startTime")));
            return ret;
        }
        set {
            m_privateObject.SetField("startTime", value);
        }
    }
    
    internal System.Nullable<System.DateTime> previousStartTime {
        get {
            System.Nullable<System.DateTime> ret = ((System.Nullable<System.DateTime>)(m_privateObject.GetField("previousStartTime")));
            return ret;
        }
        set {
            m_privateObject.SetField("previousStartTime", value);
        }
    }
    
    internal global::System.DateTime beforeLoginTime {
        get {
            global::System.DateTime ret = ((global::System.DateTime)(m_privateObject.GetField("beforeLoginTime")));
            return ret;
        }
        set {
            m_privateObject.SetField("beforeLoginTime", value);
        }
    }
    
    internal string workerName {
        get {
            string ret = ((string)(m_privateObject.GetField("workerName")));
            return ret;
        }
        set {
            m_privateObject.SetField("workerName", value);
        }
    }
    
    internal string WorkerName {
        get {
            string ret = ((string)(m_privateObject.GetProperty("WorkerName")));
            return ret;
        }
        set {
            m_privateObject.SetProperty("WorkerName", value);
        }
    }
    
    internal int SessionId {
        get {
            int ret = ((int)(m_privateObject.GetProperty("SessionId")));
            return ret;
        }
        set {
            m_privateObject.SetProperty("SessionId", value);
        }
    }
    
    internal string Phone {
        get {
            string ret = ((string)(m_privateObject.GetProperty("Phone")));
            return ret;
        }
        set {
            m_privateObject.SetProperty("Phone", value);
        }
    }
    
    internal string Login {
        get {
            string ret = ((string)(m_privateObject.GetProperty("Login")));
            return ret;
        }
        set {
            m_privateObject.SetProperty("Login", value);
        }
    }
    
    internal string Password {
        get {
            string ret = ((string)(m_privateObject.GetProperty("Password")));
            return ret;
        }
        set {
            m_privateObject.SetProperty("Password", value);
        }
    }
    
    internal int ItemId {
        get {
            int ret = ((int)(m_privateObject.GetProperty("ItemId")));
            return ret;
        }
        set {
            m_privateObject.SetProperty("ItemId", value);
        }
    }
    
    internal string ProjectName {
        get {
            string ret = ((string)(m_privateObject.GetProperty("ProjectName")));
            return ret;
        }
        set {
            m_privateObject.SetProperty("ProjectName", value);
        }
    }
    
    internal string ServerName {
        get {
            string ret = ((string)(m_privateObject.GetProperty("ServerName")));
            return ret;
        }
        set {
            m_privateObject.SetProperty("ServerName", value);
        }
    }
    
    internal string AuthLoginDbConn {
        get {
            string ret = ((string)(m_privateObject.GetProperty("AuthLoginDbConn")));
            return ret;
        }
        set {
            m_privateObject.SetProperty("AuthLoginDbConn", value);
        }
    }
    
    internal global::System.DateTime StartTime {
        get {
            global::System.DateTime ret = ((global::System.DateTime)(m_privateObject.GetProperty("StartTime")));
            return ret;
        }
        set {
            m_privateObject.SetProperty("StartTime", value);
        }
    }
    
    internal System.Nullable<System.DateTime> PreviousStartTime {
        get {
            System.Nullable<System.DateTime> ret = ((System.Nullable<System.DateTime>)(m_privateObject.GetProperty("PreviousStartTime")));
            return ret;
        }
        set {
            m_privateObject.SetProperty("PreviousStartTime", value);
        }
    }
    
    internal static object CreatePrivate() {
        object[] args = new object[0];
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("LineCheckerSrv", "LineCheckerSrv.LineCheckerJob", new System.Type[0], args);
        return priv_obj.Target;
    }
    
    internal void Execute(global::Quartz.IJobExecutionContext context) {
        object[] args = new object[] {
                context};
        m_privateObject.Invoke("Execute", new System.Type[] {
                    typeof(global::Quartz.IJobExecutionContext)}, args);
    }
    
    internal void InitializeSession(bool wasMisfired) {
        object[] args = new object[] {
                wasMisfired};
        m_privateObject.Invoke("InitializeSession", new System.Type[] {
                    typeof(bool)}, args);
    }
    
    internal bool GetCheckData() {
        object[] args = new object[0];
        bool ret = ((bool)(m_privateObject.Invoke("GetCheckData", new System.Type[0], args)));
        return ret;
    }
    
    internal bool DoWeNeedToContinue() {
        object[] args = new object[0];
        bool ret = ((bool)(m_privateObject.Invoke("DoWeNeedToContinue", new System.Type[0], args)));
        return ret;
    }
    
    internal void CheckAuthLogin(System.Collections.Generic.IEnumerable<string> files) {
        object[] args = new object[] {
                files};
        m_privateObject.Invoke("CheckAuthLogin", new System.Type[] {
                    typeof(System.Collections.Generic.IEnumerable<string>)}, args);
    }
    
    internal void MakeReport() {
        object[] args = new object[0];
        m_privateObject.Invoke("MakeReport", new System.Type[0], args);
    }
    
    internal void MakeWeeklyReport(global::System.DateTime startDate, global::System.DateTime endDate) {
        object[] args = new object[] {
                startDate,
                endDate};
        m_privateObject.Invoke("MakeWeeklyReport", new System.Type[] {
                    typeof(global::System.DateTime),
                    typeof(global::System.DateTime)}, args);
    }
    
    internal string GetWelcomeWavName() {
        object[] args = new object[0];
        string ret = ((string)(m_privateObject.Invoke("GetWelcomeWavName", new System.Type[0], args)));
        return ret;
    }
    
    internal string GetPasswordWavName() {
        object[] args = new object[0];
        string ret = ((string)(m_privateObject.Invoke("GetPasswordWavName", new System.Type[0], args)));
        return ret;
    }
    
    internal string GetMainMenuWavName() {
        object[] args = new object[0];
        string ret = ((string)(m_privateObject.Invoke("GetMainMenuWavName", new System.Type[0], args)));
        return ret;
    }
    
    internal bool CheckRecordVoiceResults(global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCallAccessor call, string fileName, string strCallPlace, System.Collections.Generic.IEnumerable<string> files) {
        object call_val_target = null;
        if ((call != null)) {
            call_val_target = call.Target;
        }
        object[] args = new object[] {
                call_val_target,
                fileName,
                strCallPlace,
                files};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("LineCheckerSrv", "LineCheckerSrv.DivaCheckCall");
        bool ret = ((bool)(m_privateObject.Invoke("CheckRecordVoiceResults", new System.Type[] {
                    target.ReferencedType,
                    typeof(string),
                    typeof(string),
                    typeof(System.Collections.Generic.IEnumerable<string>)}, args)));
        return ret;
    }
    
    internal bool CheckDtmfSendResults(global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCallAccessor call, string dtmf, string strCallPlace, System.Collections.Generic.IEnumerable<string> files) {
        object call_val_target = null;
        if ((call != null)) {
            call_val_target = call.Target;
        }
        object[] args = new object[] {
                call_val_target,
                dtmf,
                strCallPlace,
                files};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("LineCheckerSrv", "LineCheckerSrv.DivaCheckCall");
        bool ret = ((bool)(m_privateObject.Invoke("CheckDtmfSendResults", new System.Type[] {
                    target.ReferencedType,
                    typeof(string),
                    typeof(string),
                    typeof(System.Collections.Generic.IEnumerable<string>)}, args)));
        return ret;
    }
    
    internal bool RecordVoiceFile(string fileName, System.Collections.Generic.ICollection<string> files, global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCallAccessor call, string strCallPlace) {
        object call_val_target = null;
        if ((call != null)) {
            call_val_target = call.Target;
        }
        object[] args = new object[] {
                fileName,
                files,
                call_val_target,
                strCallPlace};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("LineCheckerSrv", "LineCheckerSrv.DivaCheckCall");
        bool ret = ((bool)(m_privateObject.Invoke("RecordVoiceFile", new System.Type[] {
                    typeof(string),
                    typeof(System.Collections.Generic.ICollection<string>),
                    target.ReferencedType,
                    typeof(string)}, args)));
        return ret;
    }
    
    internal bool SendDtmf(string dtmf, System.Collections.Generic.IEnumerable<string> files, global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCallAccessor call, string strCallPlace) {
        object call_val_target = null;
        if ((call != null)) {
            call_val_target = call.Target;
        }
        object[] args = new object[] {
                dtmf,
                files,
                call_val_target,
                strCallPlace};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("LineCheckerSrv", "LineCheckerSrv.DivaCheckCall");
        bool ret = ((bool)(m_privateObject.Invoke("SendDtmf", new System.Type[] {
                    typeof(string),
                    typeof(System.Collections.Generic.IEnumerable<string>),
                    target.ReferencedType,
                    typeof(string)}, args)));
        return ret;
    }
    
    internal bool DoFullCheck(global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCallAccessor call, System.Collections.Generic.ICollection<string> files) {
        object call_val_target = null;
        if ((call != null)) {
            call_val_target = call.Target;
        }
        object[] args = new object[] {
                call_val_target,
                files};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("LineCheckerSrv", "LineCheckerSrv.DivaCheckCall");
        bool ret = ((bool)(m_privateObject.Invoke("DoFullCheck", new System.Type[] {
                    target.ReferencedType,
                    typeof(System.Collections.Generic.ICollection<string>)}, args)));
        return ret;
    }
    
    internal bool DoBriefCheck(global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCallAccessor call, System.Collections.Generic.ICollection<string> files) {
        object call_val_target = null;
        if ((call != null)) {
            call_val_target = call.Target;
        }
        object[] args = new object[] {
                call_val_target,
                files};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("LineCheckerSrv", "LineCheckerSrv.DivaCheckCall");
        bool ret = ((bool)(m_privateObject.Invoke("DoBriefCheck", new System.Type[] {
                    target.ReferencedType,
                    typeof(System.Collections.Generic.ICollection<string>)}, args)));
        return ret;
    }
    
    internal bool IsBriefChecking() {
        object[] args = new object[0];
        bool ret = ((bool)(m_privateObject.Invoke("IsBriefChecking", new System.Type[0], args)));
        return ret;
    }
    
    internal void SaveCallResults() {
        object[] args = new object[0];
        m_privateObject.Invoke("SaveCallResults", new System.Type[0], args);
    }
    
    internal void SendProjectFailureMail(string strCallPlace, System.Collections.Generic.IEnumerable<string> files) {
        object[] args = new object[] {
                strCallPlace,
                files};
        m_privateObject.Invoke("SendProjectFailureMail", new System.Type[] {
                    typeof(string),
                    typeof(System.Collections.Generic.IEnumerable<string>)}, args);
    }
    
    internal bool GetReportFlag() {
        object[] args = new object[0];
        bool ret = ((bool)(m_privateObject.Invoke("GetReportFlag", new System.Type[0], args)));
        return ret;
    }
    
    internal string GetEmailAddresses(bool commonRecipient, bool projectSpecificRecipient) {
        object[] args = new object[] {
                commonRecipient,
                projectSpecificRecipient};
        string ret = ((string)(m_privateObject.Invoke("GetEmailAddresses", new System.Type[] {
                    typeof(bool),
                    typeof(bool)}, args)));
        return ret;
    }
    
    internal string GetSessionLogFilePath(string jobName) {
        object[] args = new object[] {
                jobName};
        string ret = ((string)(m_privateObject.Invoke("GetSessionLogFilePath", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
    
    internal bool IsTimeToWeeklyReport(uint reportDay) {
        object[] args = new object[] {
                reportDay};
        bool ret = ((bool)(m_privateObject.Invoke("IsTimeToWeeklyReport", new System.Type[] {
                    typeof(uint)}, args)));
        return ret;
    }
    
    internal void GetWeeklyReportTimeFrame(out global::System.DateTime dtBegin, out global::System.DateTime dtEnd) {
        object[] args = new object[] {
                null,
                null};
        m_privateObject.Invoke("GetWeeklyReportTimeFrame", new System.Type[] {
                    typeof(global::System.DateTime).MakeByRefType(),
                    typeof(global::System.DateTime).MakeByRefType()}, args);
        dtBegin = ((global::System.DateTime)(args[0]));
        dtEnd = ((global::System.DateTime)(args[1]));
    }
    
    internal void ExecuteWeeklyReport() {
        object[] args = new object[0];
        m_privateObject.Invoke("ExecuteWeeklyReport", new System.Type[0], args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class LineCheckerSrv_CheckerDAOAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("LineCheckerSrv", "LineCheckerSrv.CheckerDAO");
    
    internal LineCheckerSrv_CheckerDAOAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal string schemaName {
        get {
            string ret = ((string)(m_privateObject.GetField("schemaName")));
            return ret;
        }
        set {
            m_privateObject.SetField("schemaName", value);
        }
    }
    
    internal global::System.Data.Common.DbConnection connection {
        get {
            global::System.Data.Common.DbConnection ret = ((global::System.Data.Common.DbConnection)(m_privateObject.GetField("connection")));
            return ret;
        }
        set {
            m_privateObject.SetField("connection", value);
        }
    }
    
    internal object rowId {
        get {
            object ret = ((object)(m_privateObject.GetField("rowId")));
            return ret;
        }
        set {
            m_privateObject.SetField("rowId", value);
        }
    }
    
    internal static void AddInputParameter(global::System.Data.Common.DbCommand cmd, string name, object value) {
        object[] args = new object[] {
                cmd,
                name,
                value};
        m_privateType.InvokeStatic("AddInputParameter", new System.Type[] {
                    typeof(global::System.Data.Common.DbCommand),
                    typeof(string),
                    typeof(object)}, args);
    }
    
    internal void Initialize() {
        object[] args = new object[0];
        m_privateObject.Invoke("Initialize", new System.Type[0], args);
    }
    
    internal void UnInitialize() {
        object[] args = new object[0];
        m_privateObject.Invoke("UnInitialize", new System.Type[0], args);
    }
    
    internal bool InitializeSession(global::LineCheckSrvTestProject.LineCheckerSrv_LineCheckerJobAccessor lineCheckerJob, bool wasMisfired) {
        object lineCheckerJob_val_target = null;
        if ((lineCheckerJob != null)) {
            lineCheckerJob_val_target = lineCheckerJob.Target;
        }
        object[] args = new object[] {
                lineCheckerJob_val_target,
                wasMisfired};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("LineCheckerSrv", "LineCheckerSrv.LineCheckerJob");
        bool ret = ((bool)(m_privateObject.Invoke("InitializeSession", new System.Type[] {
                    target.ReferencedType,
                    typeof(bool)}, args)));
        return ret;
    }
    
    internal bool GetCheckData(global::LineCheckSrvTestProject.LineCheckerSrv_LineCheckerJobAccessor lineCheckerJob) {
        object lineCheckerJob_val_target = null;
        if ((lineCheckerJob != null)) {
            lineCheckerJob_val_target = lineCheckerJob.Target;
        }
        object[] args = new object[] {
                lineCheckerJob_val_target};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("LineCheckerSrv", "LineCheckerSrv.LineCheckerJob");
        bool ret = ((bool)(m_privateObject.Invoke("GetCheckData", new System.Type[] {
                    target.ReferencedType}, args)));
        return ret;
    }
    
    internal bool DoWeNeedToContinue(int sessionId) {
        object[] args = new object[] {
                sessionId};
        bool ret = ((bool)(m_privateObject.Invoke("DoWeNeedToContinue", new System.Type[] {
                    typeof(int)}, args)));
        return ret;
    }
    
    internal bool DoWeHaveWorkers(int sessionId) {
        object[] args = new object[] {
                sessionId};
        bool ret = ((bool)(m_privateObject.Invoke("DoWeHaveWorkers", new System.Type[] {
                    typeof(int)}, args)));
        return ret;
    }
    
    internal void SaveCallResults(global::LineCheckerSrv.CallResultCode callResult, string failureReason) {
        object[] args = new object[] {
                callResult,
                failureReason};
        m_privateObject.Invoke("SaveCallResults", new System.Type[] {
                    typeof(global::LineCheckerSrv.CallResultCode),
                    typeof(string)}, args);
    }
    
    internal int GetReportFlag(int sessionId) {
        object[] args = new object[] {
                sessionId};
        int ret = ((int)(m_privateObject.Invoke("GetReportFlag", new System.Type[] {
                    typeof(int)}, args)));
        return ret;
    }
    
    internal bool CheckAuthLogin(string authLoginDbConn, string userId, out int success, out System.Nullable<System.DateTime> currentTime, out System.Nullable<System.DateTime> loginTime, out System.Nullable<System.DateTime> hangUpTime) {
        object[] args = new object[] {
                authLoginDbConn,
                userId,
                null,
                null,
                null,
                null};
        bool ret = ((bool)(m_privateObject.Invoke("CheckAuthLogin", new System.Type[] {
                    typeof(string),
                    typeof(string),
                    typeof(int).MakeByRefType(),
                    typeof(System.Nullable<System.DateTime>).MakeByRefType(),
                    typeof(System.Nullable<System.DateTime>).MakeByRefType(),
                    typeof(System.Nullable<System.DateTime>).MakeByRefType()}, args)));
        success = ((int)(args[2]));
        currentTime = ((System.Nullable<System.DateTime>)(args[3]));
        loginTime = ((System.Nullable<System.DateTime>)(args[4]));
        hangUpTime = ((System.Nullable<System.DateTime>)(args[5]));
        return ret;
    }
    
    internal static bool CheckAuthLogin(global::System.Data.Common.DbConnection conn, string userId, out int success, out System.Nullable<System.DateTime> currentTime, out System.Nullable<System.DateTime> loginTime, out System.Nullable<System.DateTime> hangUpTime) {
        object[] args = new object[] {
                conn,
                userId,
                null,
                null,
                null,
                null};
        bool ret = ((bool)(m_privateType.InvokeStatic("CheckAuthLogin", new System.Type[] {
                    typeof(global::System.Data.Common.DbConnection),
                    typeof(string),
                    typeof(int).MakeByRefType(),
                    typeof(System.Nullable<System.DateTime>).MakeByRefType(),
                    typeof(System.Nullable<System.DateTime>).MakeByRefType(),
                    typeof(System.Nullable<System.DateTime>).MakeByRefType()}, args)));
        success = ((int)(args[2]));
        currentTime = ((System.Nullable<System.DateTime>)(args[3]));
        loginTime = ((System.Nullable<System.DateTime>)(args[4]));
        hangUpTime = ((System.Nullable<System.DateTime>)(args[5]));
        return ret;
    }
    
    internal string GetEmailAddresses() {
        object[] args = new object[0];
        string ret = ((string)(m_privateObject.Invoke("GetEmailAddresses", new System.Type[0], args)));
        return ret;
    }
    
    internal static string GetResultString(global::LineCheckerSrv.CallResultCode callResult) {
        object[] args = new object[] {
                callResult};
        string ret = ((string)(m_privateType.InvokeStatic("GetResultString", new System.Type[] {
                    typeof(global::LineCheckerSrv.CallResultCode)}, args)));
        return ret;
    }
    
    internal static object CreatePrivate() {
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("LineCheckerSrv", "LineCheckerSrv.CheckerDAO", new object[0]);
        return priv_obj.Target;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class LineCheckerSrv_SessionLoggingAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("LineCheckerSrv", "LineCheckerSrv.SessionLogging");
    
    internal LineCheckerSrv_SessionLoggingAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal global::log4net.Core.IAppenderAttachable connectionAppender {
        get {
            global::log4net.Core.IAppenderAttachable ret = ((global::log4net.Core.IAppenderAttachable)(m_privateObject.GetField("connectionAppender")));
            return ret;
        }
        set {
            m_privateObject.SetField("connectionAppender", value);
        }
    }
    
    internal global::log4net.Appender.FileAppender fileAppender {
        get {
            global::log4net.Appender.FileAppender ret = ((global::log4net.Appender.FileAppender)(m_privateObject.GetField("fileAppender")));
            return ret;
        }
        set {
            m_privateObject.SetField("fileAppender", value);
        }
    }
    
    internal string fileName {
        get {
            string ret = ((string)(m_privateObject.GetField("fileName")));
            return ret;
        }
        set {
            m_privateObject.SetField("fileName", value);
        }
    }
    
    internal global::log4net.ILog log {
        get {
            global::log4net.ILog ret = ((global::log4net.ILog)(m_privateObject.GetField("log")));
            return ret;
        }
        set {
            m_privateObject.SetField("log", value);
        }
    }
    
    internal string FileName {
        set {
            m_privateObject.SetProperty("FileName", value);
        }
    }
    
    internal global::log4net.ILog GetLogger(string loggerName) {
        object[] args = new object[] {
                loggerName};
        global::log4net.ILog ret = ((global::log4net.ILog)(m_privateObject.Invoke("GetLogger", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
    
    internal void OpenSessionLogger() {
        object[] args = new object[0];
        m_privateObject.Invoke("OpenSessionLogger", new System.Type[0], args);
    }
    
    internal void CloseSessionLogger() {
        object[] args = new object[0];
        m_privateObject.Invoke("CloseSessionLogger", new System.Type[0], args);
    }
    
    internal static object CreatePrivate() {
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("LineCheckerSrv", "LineCheckerSrv.SessionLogging", new object[0]);
        return priv_obj.Target;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class LineCheckerSrv_DivaCheckCallAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("LineCheckerSrv", "LineCheckerSrv.DivaCheckCall");
    
    internal LineCheckerSrv_DivaCheckCallAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal global::log4net.ILog log {
        get {
            global::log4net.ILog ret = ((global::log4net.ILog)(m_privateObject.GetField("log")));
            return ret;
        }
        set {
            m_privateObject.SetField("log", value);
        }
    }
    
    internal global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor state {
        get {
            object _ret_val = m_privateObject.GetField("state");
            global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor _ret = null;
            if ((_ret_val != null)) {
                _ret = new global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor(_ret_val);
            }
            global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor ret = _ret;
            return ret;
        }
        set {
            m_privateObject.SetField("state", value);
        }
    }
    
    internal void OnCallConnected() {
        object[] args = new object[0];
        m_privateObject.Invoke("OnCallConnected", new System.Type[0], args);
    }
    
    internal void OnCallDisconnected() {
        object[] args = new object[0];
        m_privateObject.Invoke("OnCallDisconnected", new System.Type[0], args);
    }
    
    internal void OnSendDTMFToneEnded() {
        object[] args = new object[0];
        m_privateObject.Invoke("OnSendDTMFToneEnded", new System.Type[0], args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("LineCheckerSrv", "LineCheckerSrv.DivaCheckCall+CallCurrentState");
    
    internal LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal static global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor Connected {
        get {
            object _ret_val = m_privateType.GetStaticField("Connected");
            global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor _ret = null;
            if ((_ret_val != null)) {
                _ret = new global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor(_ret_val);
            }
            global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor ret = _ret;
            return ret;
        }
    }
    
    internal static global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor Disconnected {
        get {
            object _ret_val = m_privateType.GetStaticField("Disconnected");
            global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor _ret = null;
            if ((_ret_val != null)) {
                _ret = new global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor(_ret_val);
            }
            global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor ret = _ret;
            return ret;
        }
    }
    
    internal static global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor RecordFailure {
        get {
            object _ret_val = m_privateType.GetStaticField("RecordFailure");
            global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor _ret = null;
            if ((_ret_val != null)) {
                _ret = new global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor(_ret_val);
            }
            global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor ret = _ret;
            return ret;
        }
    }
    
    internal static global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor Busy {
        get {
            object _ret_val = m_privateType.GetStaticField("Busy");
            global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor _ret = null;
            if ((_ret_val != null)) {
                _ret = new global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor(_ret_val);
            }
            global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor ret = _ret;
            return ret;
        }
    }
    
    internal static global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor DtmfToneSent {
        get {
            object _ret_val = m_privateType.GetStaticField("DtmfToneSent");
            global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor _ret = null;
            if ((_ret_val != null)) {
                _ret = new global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor(_ret_val);
            }
            global::LineCheckSrvTestProject.LineCheckerSrv_DivaCheckCall_CallCurrentStateAccessor ret = _ret;
            return ret;
        }
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class LineCheckerSrv_LogCleanerAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("LineCheckerSrv", "LineCheckerSrv.LogCleaner");
    
    internal LineCheckerSrv_LogCleanerAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal static string QUERY_TMPL {
        get {
            string ret = ((string)(m_privateType.GetStaticField("QUERY_TMPL")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("QUERY_TMPL", value);
        }
    }
    
    internal static string GetDate(int days) {
        object[] args = new object[] {
                days};
        string ret = ((string)(m_privateType.InvokeStatic("GetDate", new System.Type[] {
                    typeof(int)}, args)));
        return ret;
    }
    
    internal static string GetDrive(string sFullPath) {
        object[] args = new object[] {
                sFullPath};
        string ret = ((string)(m_privateType.InvokeStatic("GetDrive", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
    
    internal static string GetPath(string sFullPath) {
        object[] args = new object[] {
                sFullPath};
        string ret = ((string)(m_privateType.InvokeStatic("GetPath", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
    
    internal static string GetExtensionCondition(System.Collections.Generic.IEnumerable<string> extensions) {
        object[] args = new object[] {
                extensions};
        string ret = ((string)(m_privateType.InvokeStatic("GetExtensionCondition", new System.Type[] {
                    typeof(System.Collections.Generic.IEnumerable<string>)}, args)));
        return ret;
    }
    
    internal static string GetQuery(string sDataPath, System.Collections.Generic.IEnumerable<string> extensions, int days) {
        object[] args = new object[] {
                sDataPath,
                extensions,
                days};
        string ret = ((string)(m_privateType.InvokeStatic("GetQuery", new System.Type[] {
                    typeof(string),
                    typeof(System.Collections.Generic.IEnumerable<string>),
                    typeof(int)}, args)));
        return ret;
    }
    
    internal static bool Clean(string sDataPath, string[] extensions, int days) {
        object[] args = new object[] {
                sDataPath,
                extensions,
                days};
        bool ret = ((bool)(m_privateType.InvokeStatic("Clean", new System.Type[] {
                    typeof(string),
                    typeof(string).MakeArrayType(),
                    typeof(int)}, args)));
        return ret;
    }
    
    internal static global::Common.Logging.ILog GetLogger() {
        object[] args = new object[0];
        global::Common.Logging.ILog ret = ((global::Common.Logging.ILog)(m_privateType.InvokeStatic("GetLogger", new System.Type[0], args)));
        return ret;
    }
    
    internal static void NewObject(object sender, global::System.Management.ObjectReadyEventArgs args) {
        object[] _args = new object[] {
                sender,
                args};
        m_privateType.InvokeStatic("NewObject", new System.Type[] {
                    typeof(object),
                    typeof(global::System.Management.ObjectReadyEventArgs)}, _args);
    }
    
    internal static void Done(object sender, global::System.Management.CompletedEventArgs obj) {
        object[] args = new object[] {
                sender,
                obj};
        m_privateType.InvokeStatic("Done", new System.Type[] {
                    typeof(object),
                    typeof(global::System.Management.CompletedEventArgs)}, args);
    }
    
    internal static object CreatePrivate() {
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("LineCheckerSrv", "LineCheckerSrv.LogCleaner", new object[0]);
        return priv_obj.Target;
    }
}
}
