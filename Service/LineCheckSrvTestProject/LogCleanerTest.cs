// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using System.IO;
using System.Threading;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
namespace LineCheckSrvTestProject
{
    /// <summary>
    ///This is a test class for LineCheckerSrv.LogCleaner and is intended
    ///to contain all LineCheckerSrv.LogCleaner Unit Tests
    ///</summary>
    [TestClass()]
    public class LogCleanerTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion

        /// <summary>
        ///A test for GetDrive (string)
        ///</summary>
        [DeploymentItem("LineCheckerSrv.exe")]
        [TestMethod()]
        public void GetDriveTest()
        {
            string sFullPath = null; // TODO: Initialize to an appropriate value

            string expected = null;
            string actual;

            expected = "c:";
            sFullPath = "c:/some/path";
            actual = LineCheckSrvTestProject.LineCheckerSrv_LogCleanerAccessor.GetDrive(sFullPath);
            Assert.AreEqual(expected, actual, "LineCheckerSrv.LogCleaner.GetDrive did not return the expected value.");

            expected = "d:";
            sFullPath = @"d:\another\path";
            actual = LineCheckSrvTestProject.LineCheckerSrv_LogCleanerAccessor.GetDrive(sFullPath);
            Assert.AreEqual(expected, actual, "LineCheckerSrv.LogCleaner.GetDrive did not return the expected value.");

            expected = "z:";
            sFullPath = @"z:\\also another\\path";
            actual = LineCheckSrvTestProject.LineCheckerSrv_LogCleanerAccessor.GetDrive(sFullPath);
            Assert.AreEqual(expected, actual, "LineCheckerSrv.LogCleaner.GetDrive did not return the expected value.");

        }



        /// <summary>
        ///A test for GetPath (string)
        ///</summary>
        [DeploymentItem("LineCheckerSrv.exe")]
        [TestMethod()]
        public void GetPathTest()
        {
            string sFullPath = null; // TODO: Initialize to an appropriate value

            string expected = null;
            string actual;

            expected = "\\\\";
            sFullPath = @"d:";
            actual = LineCheckSrvTestProject.LineCheckerSrv_LogCleanerAccessor.GetPath(sFullPath);
            Assert.AreEqual(expected, actual, "1:LineCheckerSrv.LogCleaner.GetPath did not return the expected value.");

            expected = "\\\\some\\\\path\\\\";
            sFullPath = @"d:/some/path/";
            actual = LineCheckSrvTestProject.LineCheckerSrv_LogCleanerAccessor.GetPath(sFullPath);
            Assert.AreEqual(expected, actual, "2:LineCheckerSrv.LogCleaner.GetPath did not return the expected value.");

            expected = "\\\\some\\\\path\\\\";
            sFullPath = @"d:\some\path\";
            actual = LineCheckSrvTestProject.LineCheckerSrv_LogCleanerAccessor.GetPath(sFullPath);
            Assert.AreEqual(expected, actual, "3:LineCheckerSrv.LogCleaner.GetPath did not return the expected value.");

            expected = "\\\\some\\\\path\\\\";
            sFullPath = @"d:\\some\\path\\";
            actual = LineCheckSrvTestProject.LineCheckerSrv_LogCleanerAccessor.GetPath(sFullPath);
            Assert.AreEqual(expected, actual, "4:LineCheckerSrv.LogCleaner.GetPath did not return the expected value.");


            expected = "\\\\some\\\\pat\\'h\\\\";
            sFullPath = "d:\\some\\pat'h\\";
            actual = LineCheckSrvTestProject.LineCheckerSrv_LogCleanerAccessor.GetPath(sFullPath);
            Assert.AreEqual(expected, actual, "5:LineCheckerSrv.LogCleaner.GetPath did not return the expected value.");

        }

        
        /// <summary>
        ///A test for GetExtensionCondition (string)
        ///</summary>
        [DeploymentItem("LineCheckerSrv.exe")]
        [TestMethod()]
        public void GetExtensionConditionTest()
        {
            string[] extensions = null; // TODO: Initialize to an appropriate value

            string expected = null;
            string actual;

            extensions = new string[] { "wav", "log" };
            expected = " AND (Extension = 'wav' OR Extension = 'log') ";
            actual = LineCheckSrvTestProject.LineCheckerSrv_LogCleanerAccessor.GetExtensionCondition(extensions);
            Assert.AreEqual(expected, actual, "1:LineCheckerSrv.LogCleaner.GetExtensionCondition did not return the expected value" +
                    ".");

            extensions = new string[] {"wav" , "log"};
            expected = " AND (Extension = 'wav' OR Extension = 'log') ";
            actual = LineCheckSrvTestProject.LineCheckerSrv_LogCleanerAccessor.GetExtensionCondition(extensions);
            Assert.AreEqual(expected, actual, "2:LineCheckerSrv.LogCleaner.GetExtensionCondition did not return the expected value" +
                    ".");

            extensions = new string[] {"wav"};
            expected = " AND (Extension = 'wav') ";
            actual = LineCheckSrvTestProject.LineCheckerSrv_LogCleanerAccessor.GetExtensionCondition(extensions);
            Assert.AreEqual(expected, actual, "3:LineCheckerSrv.LogCleaner.GetExtensionCondition did not return the expected value" +
                    ".");

            extensions = new string[] {""};
            expected = "";
            actual = LineCheckSrvTestProject.LineCheckerSrv_LogCleanerAccessor.GetExtensionCondition(extensions);
            Assert.AreEqual(expected, actual, "4:LineCheckerSrv.LogCleaner.GetExtensionCondition did not return the expected value" +
                    ".");
        }
        
        /// <summary>
        ///A test for Clean (string, string[], int)
        ///</summary>
        [DeploymentItem("LineCheckerSrv.exe")]
        [TestMethod()]
        public void CleanTest()
        {
            int days = 7; // TODO: Initialize to an appropriate value

            bool expected = false;
            bool actual;

            string dir = "c:\\" + Path.GetRandomFileName() + "\\";
            Directory.CreateDirectory(dir);

            TimeSpan ts = new TimeSpan(days + 1, 0, 0, 0);
            DateTime dt = DateTime.Now.Subtract(ts);

            string log_file = dir + "file1.log";
            string wav_file = dir + "file1.wav";
            string txt_file = dir + "file1.txt";

            string log_file2 = dir + "file2.log";
            string wav_file2 = dir + "file2.wav";
            string txt_file2 = dir + "file2.txt";

            using (File.Create(log_file)) { }
            using (File.Create(wav_file)) { }
            using (File.Create(txt_file)) { }

            using (File.Create(log_file2)) { }
            using (File.Create(wav_file2)) { }
            using (File.Create(txt_file2)) { }

            Directory.SetCreationTime(log_file, dt);
            Directory.SetCreationTime(wav_file, dt);
            Directory.SetCreationTime(txt_file, dt);

            expected = true;
            actual = LineCheckSrvTestProject.LineCheckerSrv_LogCleanerAccessor.Clean(dir, new string[] { "wav", "log" }, days);

            Thread.Sleep(3000);

            Assert.IsTrue(File.Exists(log_file2), "Error: file " + log_file2 + " must exist");
            Assert.IsTrue(File.Exists(wav_file2), "Error: file " + wav_file2 + " must exist");
            Assert.IsTrue(File.Exists(txt_file2), "Error: file " + txt_file2 + " must exist");

            Assert.IsFalse(File.Exists(log_file), "Error: file " + log_file + " must not exist");
            Assert.IsFalse(File.Exists(wav_file), "Error: file " + wav_file + " must not exist");
            Assert.IsTrue(File.Exists(txt_file), "Error: file " + txt_file + " must exist");


            Assert.AreEqual(expected, actual, "LineCheckerSrv.LogCleaner.Clean did not return the expected value.");

            Directory.Delete(dir, true);
        }
    }


}
